#!/usr/bin/env ruby
#
# Create a website from:
#  - plain html template files
#  - markdown content files
#  - nokogiri content insertion
#
# Re blog posts:
#  - blog posts have a published status
#  - when that status is *falsey*, the blog post page is *not* generated
#  - when that status is *truthy*, the blog post page *is* generated
#  - when that status equals :published, the blog post is listed in the blog posts sidebar
#

require './static_site_generator'
require 'redcarpet'  # markdown processing
require 'nokogiri'   # inserting dynamic values into html
require 'cgi'        # escaping query parameters
require 'pp'         # debugging - pretty printing objects


CONTENT_EXTENSION = '.md'


def no_ext filename
  File.basename(filename, '.*')
end


class TemplateProcessor

  def self.process_template raw_template, all_metadata
    PROCESSORS.reduce( Nokogiri::HTML.parse(raw_template) ) do | memo, func |
      func.call(memo, all_metadata)
    end
  end

  PROCESSORS = [

    # Populate the blog-post sidebar.
    ->(template, metadata) do
      return template if ! template.at_css(".blog-posts")

      blog_meta = metadata[:content_directories].find {|dir| dir[:filename] == 'blog.content'}

      posts = blog_meta[:content_files].select do |file_meta|
        # - the published status must be exactly :published to link to the blog post
        # - ignore index.md . it is a symlink, not a blog post
        file_meta[:published] == :published  &&  ( file_meta[:filename] != 'index.md' )
      end
      .sort { |a,b| b[:date] <=> a[:date] } # latest first

      list = template.at_css('sidebar.blog-posts ul')
      listings = list.css('li')

      posts.each_with_index do | post, i |
        li = if i < listings.count then listings[i] else listings.first.clone end

        li.at_css('h3 a').content =
        post[:post_title] || post[:html_head_title]
        li.at_css('h3 a')[:href] = "/blog/" + no_ext(post[:filename])

        li.at_css('date').content = post[:date]
        li.at_css('p').content = post[:teaser]

        list.add_child(li) if ! listings.include? li
      end

      if listings.count > posts.count
        (posts.count ... listings.count).each { |i| listings[i].remove }
      end

      template
    end
  ]
end


class ContentProcessor

  def self.content_file? filename
    return filename.end_with? CONTENT_EXTENSION
  end

  def self.process_content markdown, template, file_meta
    if file_meta[:template] == 'blog.template.html' && ! file_meta[:published]
      return nil
    end

    PROCESSORS.reduce( templated_content(markdown, template) ) do | doc, func |
      func.call(doc, file_meta)
    end
  end

  def self.templated_content markdown, template
    # Is this important? Do not alter cached copy of template. Clone.
    template = template.clone

    main = template.at_css('main.blog-post .content') || template.at_css('main')
    main.content = ''
    main.add_child(
      Redcarpet::Markdown.new(Redcarpet::Render::HTML.new).render(markdown)
    )

    template
  end

  PROCESSORS = [

    # Set the head title element.
    ->(doc, file_meta) do
      title = doc.at_css("html head title")
      tpl_title = title.content
      suffix = tpl_title[tpl_title.index(' | ')..-1]
      title.content = file_meta[:html_head_title] + suffix
      doc
    end,

    # Set the active menu option
    ->(doc, file_meta) do
      case file_meta[:template]
      when 'home.template.html'
        menu_item = doc.at_css('#top-menu a[href="/"]')
      when 'page.template.html'
        menu_item = doc.at_css("#top-menu a[href='/#{no_ext(file_meta[:filename])}']")
      when 'blog.template.html'
        menu_item = doc.at_css('#top-menu a[href="/blog"]')
      end
      # menu_item.parent.set_attribute('is-active', 'true') if menu_item
      menu_item.set_attribute('is-active', 'true') if menu_item

      doc
    end,

    # Set blog-post metadata and socmed links
    ->(doc, file_meta) do
      return doc if file_meta[:template] != 'blog.template.html'

      title = file_meta[:post_title] || file_meta[:html_head_title]
      url = 'https://justinhellings.uk/blog/' + no_ext(file_meta[:filename]) + '/'

      doc.at_css('meta.og-description').set_attribute('content', file_meta[:teaser])
      doc.at_css('main h2').content = title
      doc.at_css('main .blog-meta .date').content =
      file_meta[:date].strftime(
        english_ordinal( file_meta[:date].day ) + " %B %Y"
      )
      doc.at_css('.sharing a.twitter').set_attribute('href',
        'https://twitter.com/intent/tweet?text=' + CGI.escape(title + ' ' + url + ' @JHellings')
      )
      doc.at_css('.sharing a.facebook').set_attribute('href',
        'https://www.facebook.com/sharer/sharer.php?u=' + CGI.escape(url)
      )

      doc
    end

    # TODO: Set the active blog post in the sidebar

  ]
end


def create_rss_feed metadata, output_dir

end


ssg = StaticSiteGenerator.new TemplateProcessor, ContentProcessor
metadata = ssg.generate Dir.pwd + "/input", Dir.pwd + "/output", Dir.pwd + "/templates"
create_rss_feed metadata, Dir.pwd + "/output"
